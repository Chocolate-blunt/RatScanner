@page "/interactableOverlay"
@using RatScanner.Scan
@using RatScanner.View;
@using RatStash
@inject MenuVM MenuVM
@inject RatScanner.VirtualScreenOffset VirtualScreenOffset
@inject SettingsVM SettingsVM;
@inject IJSRuntime JSRuntime;
@implements IDisposable

<div id="click-away-background" style="position: absolute; width: 100%; height: 100%;"
     onmousedown="if (event.target == this) DotNet.invokeMethodAsync('RatScanner', 'JSHideOverlay')"></div>
<div style="width: 100%; height: 100%;">
    <!--Disable pointer events to make clicks on layout divs passthorugh to the "click-away-background"-->
    <div style="position: relative; top: 20%; pointer-events: none;">
        <div class="d-flex align-content-center justify-center">

            <!--Enable pointer events again to make elements clickable-->
            <div style="width: 40%; pointer-events: auto;">
                <MudPaper>
                    <MudTextField @ref="_searchTextField" T="string" Variant="Variant.Outlined"
                                  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search"
                                  DebounceInterval="100" OnDebounceIntervalElapsed="ExecuteSearch" @bind-Value="@_searchText">
                    </MudTextField>
                </MudPaper>

                <MudStack Spacing="2" Class="py-2">
                    @foreach (var searchResult in _searchResults)
                    {
                        if (searchResult.Data is RatStash.Item item)
                        {
                            <MudPaper Class="" Elevation="1" Style="height:10vh;">
                                <MudStack Row="true">
                                    <MudImage Class="ma-0 pa-2" Src="@($"https://assets.tarkov.dev/{item.Id}-base-image.png")"
                                      Style="height:10vh; width:10vh; object-fit: contain;" />
                                    <MudStack Justify="Justify.SpaceEvenly">
                                        <MudText Class="ellipsis" Typo="Typo.caption" Style="font-size: 1.5rem;">
                                            @item.Name
                                        </MudText>
                                        <MudText Class="ellipsis" Typo="Typo.caption" Style="font-size: 1.5rem;">
                                            @item.ShortName
                                        </MudText>
                                    </MudStack>
                                </MudStack>
                            </MudPaper>
                        }
                    }
                </MudStack>
            </div>
        </div>
    </div>
</div>

<style>
    .ellipsis {
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .mud-select-input {
        font-size: 2.00rem;
    }
</style>

@code {
    private List<RatStash.Item>? _items;

    private static MudTextField<string> _searchTextField { get; set; }

    private string _searchText { get; set; }

    private IEnumerable<SearchResult> _searchResults { get; set; } = new List<SearchResult>();

    private async void ExecuteSearch(string value)
    {
        var items = await SearchItem(value);
        var tmp = items ?? new SearchResult[0];
        tmp = tmp.Where(result => result != null && result.Data != null);
        tmp = tmp.OrderBy(result => result.Score).Take(4);
        _searchResults = tmp;
    }

    private async Task<IEnumerable<SearchResult>> SearchItem(string value)
    {
        if (_items == null) _items = RatScannerMain.Instance.RatStashDB?.GetItems()?.ToList() ?? null;
        if (_items == null) return null;

        if (string.IsNullOrEmpty(value)) return null;

        value = SanitizeSearch(value);

        Func<RatStash.Item, SearchResult> filter = (item) =>
            {
	            if (SanitizeSearch(item.Name) == value) return new(item, 5);
	            if (SanitizeSearch(item.ShortName) == value) return new(item, 10);

                if (SanitizeSearch(item.Name).StartsWith(value)) return new(item, 20);
                if (SanitizeSearch(item.ShortName).StartsWith(value)) return new(item, 20);

                // Match every individual word (expensive)
                string[] filters = value.Split(new[] { ' ' });
                if (filters.All(filter => SanitizeSearch(item.Name).Contains(filter))) return new(item, 40);
                if (filters.All(filter => SanitizeSearch(item.ShortName).Contains(filter))) return new(item, 40);

                if (SanitizeSearch(item.Name).Contains(value)) return new(item, 60);
                if (SanitizeSearch(item.ShortName).Contains(value)) return new(item, 60);

                if (value.Length > 3 && SanitizeSearch(item.Id).StartsWith(value)) return new(item, 80);
                if (value.Length > 3 && SanitizeSearch(item.Id).Contains(value)) return new(item, 100);
                return new(null, -1);
            };

        var matches = new List<SearchResult>();
        foreach (var item in _items)
        {
            var match = filter(item);
            if (match.Data == null) continue;
            matches.Add(match);
        }

        for (var i = 0; i < matches.Count; i++)
        {
            // Slightly penalize items with long names
            matches[i].Score += (matches[i].Data as Item).Name.Length * 0.002;

            // Penalize weapon mods so the weapon it self will rank higher
            if (matches[i].Data is RatStash.WeaponMod) matches[i].Score += 5;
        }

        return matches;
    }

    private string SanitizeSearch(string value)
    {
        value = value.ToLower();
        value = new string(value.Where(c => char.IsLetterOrDigit(c) || c == ' ').ToArray());
        return value;
    }

    [JSInvokable]
    public static void JSHideOverlay()
    {
        BlazorUI.BlazorInteractableOverlay.HideOverlay();
    }

    [JSInvokable]
    public static void JSShowOverlay()
    {
        _searchTextField.FocusAsync();
        _searchTextField.SelectAsync();
    }

    protected override void OnInitialized()
    {
        MenuVM.PropertyChanged += PropertyChangeHandler;
    }

    private async void PropertyChangeHandler(object sender, EventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        MenuVM.PropertyChanged -= PropertyChangeHandler;
    }

    public class SearchResult
    {
        public SearchResult(object data, float score)
        {
            Score = score;
            Data = data;
        }

        public object Data;
        public double Score;
    }
}
