@page "/"
@page "/app"
@using RatScanner.Scan
@using System.Diagnostics
@using RatScanner.ViewModel
@inject MenuVM MenuVM
@implements IDisposable

<MudGrid Class="pa-0" Spacing="0">
    <MudGrid Class="pa-0" Spacing="0">
        <MudItem xs="12">
            <div class="d-flex align-center justify-start mx-2 mt-2 mb-1">
                <img src="@item.IconLink" class="mr-2 mud-elevation-1" style="border-style: solid; border-width: 1px; border-color: #585D60; display: block; max-width: 64px; max-height: 64px; width: auto; height: auto;" />
                <div style="text-shadow: 2px 2px 5px black;">
                    <MudText Typo="Typo.subtitle1" Color="Color.Inherit">
                        @(item.MatchedItem.Name.Length < 40 ? item.MatchedItem.Name : item.MatchedItem.ShortName)
                    </MudText>
                </div>
            </div>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Class="d-flex align-center justify-center pa-1 ml-2 mr-1 my-1 mud-grey-darken4" Elevation="2" @onclick="OpenWiki" Style="cursor: pointer;" MinHeight="32px">
                <img src="https://static.wikia.nocookie.net/escapefromtarkov_gamepedia/images/e/e6/Site-logo.png" height="24px" />
            </MudPaper>
        </MudItem>
        <MudItem xs="6">
            <MudPaper Class="d-flex align-center justify-center pa-1 ml-1 mr-2 my-1" Elevation="2" @onclick="OpenTarkovDev" Style="cursor: pointer;" MinHeight="32px">
                <img src="https://api.ratscanner.com/v3/file/tarkov-dev-logo.png" height="18px" />
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="align-center justify-center pa-2 mx-2 my-1" Elevation="2">
                <div class="d-flex justify-space-between align-center mt-2">
                    <MudText Typo="Typo.subtitle2">Recent Avg. Price</MudText>
                    <MudText Typo="Typo.subtitle2">@MenuVM.IntToLongPrice(item.Avg24hPrice)</MudText>
                </div>
                <div class="d-flex justify-space-between align-center my-1">
                    <MudText Typo="Typo.subtitle2">Value per Slot</MudText>
                    <MudText Typo="Typo.subtitle2">@MenuVM.IntToLongPrice(item.PricePerSlot)</MudText>
                </div>
                <MudDivider DividerType="DividerType.FullWidth" />
                <div class="d-flex justify-space-between align-center mt-2">
                    <MudText Typo="Typo.subtitle2">Best Trader</MudText>
                    <div class="d-flex align-center">
                        <MudAvatar Image="@($"https://tarkov.dev/images/{@item.TraderName.ToLower()}-icon.jpg")" Size="Size.Small" Style="float: left;" Class="mr-1" Elevation="1" /><MudText Typo="Typo.subtitle2" Style="float: right;">@item.TraderName</MudText>
                    </div>
                </div>
                <div class="d-flex justify-space-between align-center my-1">
                    <MudText Typo="Typo.subtitle2">Trader Price</MudText>
                    <MudText Typo="Typo.subtitle2">@MenuVM.IntToLongPrice(item.BestTraderPrice)</MudText>
                </div>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="d-flex align-center justify-space-around pa-1 mx-2 my-1" Elevation="2">
                @*<div class="d-flex align-center">
                @MenuVM.TrackingNeedsQuestRemaining <MudIcon Icon="@Icons.Filled.Checklist" Size="Size.Small" Class="ml-1" /> Quest
                </div>
                <div class="d-flex align-center">
                @MenuVM.TrackingNeedsHideoutRemaining <MudIcon Icon="@Icons.Filled.House" Size="Size.Small" Class="ml-1" /> Hideout
                </div>*@
                @if (MenuVM.GetItemTeamNeeds(item) != null && (MenuVM.GetItemTeamNeedsSummed(item).QuestRemaining > 0 || MenuVM.GetItemTeamNeedsSummed(item).HideoutRemaining > 0))
                {
                    <MudGrid Spacing="0" Class="pa-0 ma-0">
                        @foreach (var teammate in MenuVM.GetItemTeamNeeds(item).Where(t => t.Value.QuestRemaining > 0 || t.Value.HideoutRemaining > 0).ToList())
                        {
                            <MudItem xs="12" Class="pa-0 ma-0">
                                <div class="d-flex justify-space-between">
                                    <div class="mx-1">@teammate.Key</div>
                                    <div class="d-flex align-center">
                                        <MudIcon Icon="@Icons.Filled.Checklist" Size="Size.Small" Class="mr-1" /> @teammate.Value.QuestRemaining
                                        <MudIcon Icon="@Icons.Filled.House" Size="Size.Small" Class="ml-3 mr-1" /> @teammate.Value.HideoutRemaining
                                    </div>
                                </div>
                            </MudItem>
                        }
                    </MudGrid>
                }
                else
                {
                    <div class="d-flex align-center">
                        @MenuVM.GetItemNeeds(item).QuestRemaining <MudIcon Icon="@Icons.Filled.Checklist" Size="Size.Small" Class="ml-1" /> Quest
                    </div>
                    <div class="d-flex align-center">
                        @MenuVM.GetItemNeeds(item).HideoutRemaining <MudIcon Icon="@Icons.Filled.House" Size="Size.Small" Class="ml-1" /> Hideout
                    </div>
                }
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <MudPaper Class="d-flex align-center justify-space-around pa-1 mx-2 my-1" Elevation="2">
                <MudAutocomplete @ref="_searchBox" T="RatStash.Item" Label="Item Search" PopoverClass="searchBoxPopover" SelectValueOnTab="true" ValueChanged="SetSearchItem" MaxItems="5" AnchorOrigin="Origin.TopCenter" TransformOrigin="Origin.BottomCenter" CoerceValue="true" AdornmentIcon="@Icons.Material.Filled.Search" SearchFunc="@SearchItem" Margin="Margin.Dense" Dense="true" Variant="Variant.Outlined">
                    <ItemTemplate Context="item">
                        <MudPaper Class="ma-n1" Elevation="4">
                            <MudStack Row="true" Style="height: 48px">
                                <MudImage Class="m-0 p-0" Src="@item.GetMarketItem().IconLink" Style="max-width:100%; max-height:100%;" />
                                <MudText Class="overflow-hidden" Style="height: 48px;">
                                    @(item == null ? null : $"{item.Name}")
                                </MudText>
                            </MudStack>
                        </MudPaper>
                    </ItemTemplate>
                </MudAutocomplete>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudGrid>

@code {
    private ItemScan item => MenuVM.LastItemScan;

    private List<RatStash.Item>? _items;

    private MudAutocomplete<RatStash.Item> _searchBox { get; set; }

    protected override void OnInitialized()
    {
        MenuVM.PropertyChanged += PropertyChangeHandler;
    }

    private async Task<IEnumerable<RatStash.Item>> SearchItem(string value)
    {
        if (_items == null) _items = MenuVM.RatStashDB?.GetItems()?.ToList() ?? null;
        if (_items == null) return new RatStash.Item[0];

        if (string.IsNullOrEmpty(value)) return new RatStash.Item[0];

        value = value.ToLower();
        var matches = _items.Where(item =>
        {
            if (item.Name.ToLower().Contains(value)) return true;
            if (item.ShortName.ToLower().Contains(value)) return true;
            if (value.Length > 3 && item.Id.ToLower().Contains(value)) return true;

            // Match every individual word (expensive)
            string[] filters = value.Split(new[] { ' ' });
            if (filters.All(filter => item.Name.ToLower().Contains(filter))) return true;
            if (filters.All(filter => item.ShortName.ToLower().Contains(filter))) return true;
            return false;
        });

        return matches;
    }

    private async void SetSearchItem(RatStash.Item item)
    {
        if (item == null) return;
        MenuVM.ItemScans.Enqueue(new DefaultItemScan(item));
        await _searchBox.Clear();
    }

    private async void OpenWiki()
    {
        if (item.WikiLink != null)
        {
            OpenURL(item.WikiLink);
        }
    }

    private async void OpenTarkovDev()
    {
        if (item.TarkovDevLink != null)
        {
            OpenURL(item.TarkovDevLink);
        }
    }

    private void OpenURL(string url)
    {
        var psi = new ProcessStartInfo
            {
                FileName = url,
                UseShellExecute = true,
            };
        Process.Start(psi);
    }

    private async void PropertyChangeHandler(object sender, EventArgs e)
    {
        await InvokeAsync(() => StateHasChanged());
    }

    public void Dispose()
    {
        MenuVM.PropertyChanged -= PropertyChangeHandler;
    }

}
